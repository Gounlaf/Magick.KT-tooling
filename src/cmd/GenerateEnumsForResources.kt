package imagemagick.cmd

import com.anyascii.AnyAscii
import com.github.ajalt.clikt.core.CliktCommand
import com.github.ajalt.clikt.parameters.arguments.argument
import com.github.ajalt.clikt.parameters.arguments.help
import com.github.ajalt.clikt.parameters.options.option
import com.github.ajalt.clikt.parameters.types.file
import com.squareup.kotlinpoet.FileSpec
import com.squareup.kotlinpoet.FunSpec
import com.squareup.kotlinpoet.PropertySpec
import com.squareup.kotlinpoet.TypeSpec
import java.io.File

class GenerateEnumsForResources : CliktCommand() {
    private val sourceDir by argument().file(mustBeReadable = true)
    private val outputPackage by argument().help("Package of the generated file")

    private val outputFile by option().file(mustExist = false)

    private fun File.sanitizeName() = AnyAscii.transliterate(nameWithoutExtension.plus(extension.uppercase()))
        .filterNot { c: Char -> c == ' ' }
        .filterNot { c: Char -> c == '-' }
        .replace('.', '_')
        .replaceFirstChar { it.uppercase() }

    private fun recursiveBuild(dir: File): TypeSpec.Builder {
        val builder = TypeSpec.enumBuilder(dir.sanitizeName())
            .primaryConstructor(
                FunSpec.constructorBuilder()
                    .addParameter("path", String::class)
                    .build()
            )

        dir.walkTopDown()
            .maxDepth(1)
            .filterNot { it == dir }
            .sorted()
            .forEach {
                if (it.isDirectory) {
                    builder.addType(recursiveBuild(it).build())
                } else {
                    builder.addEnumConstant(
                        it.sanitizeName(),
                        TypeSpec.anonymousClassBuilder()
                            .addSuperclassConstructorParameter("%S", it.relativeTo(sourceDir))
                            .build()
                    )
                }
            }

        builder.addProperty(
            PropertySpec.builder("path", String::class)
                .initializer("path")
                .build()
        )

        return builder
    }

    override fun run() {
        val builder = FileSpec.builder(outputPackage, "whatever")
            .addFileComment("Autogenerated file; do not edit")
            .addType(recursiveBuild(sourceDir).build())
            .build()

        outputFile?.let { out ->
            out.outputStream().writer(Charsets.UTF_8).use {
                builder.writeTo(it)
            }
        } ?: builder.writeTo(System.out)
    }
}
